import{_ as t,e,i as p,g as i,f as s,r as o,o as l}from"./app-CPyUwv8V.js";const c={};function r(u,n){const a=o("BackToPath");return l(),e("div",null,[n[0]||(n[0]=p(`<h1 id="classification-algorithm-comparison" tabindex="-1"><a class="header-anchor" href="#classification-algorithm-comparison"><span>Classification Algorithm Comparison</span></a></h1><div class="knowledge-card"><div class="knowledge-card__title"><span class="icon">📚</span>Key Points of This Section </div><div class="knowledge-card__content"><ul><li>Understand the advantages, disadvantages, and applicable scenarios of different classification algorithms</li><li>Master how to choose the right classification algorithm</li><li>Learn how to evaluate and compare the performance of different classification models</li><li>Understand how ensemble methods can improve classification performance</li></ul></div></div><h2 id="comparison-of-main-classification-algorithms" tabindex="-1"><a class="header-anchor" href="#comparison-of-main-classification-algorithms"><span>Comparison of Main Classification Algorithms</span></a></h2><p>Different classification algorithms have their advantages, disadvantages, and suitable scenarios. Here is a comparison of common classification algorithms:</p><div class="table-container"><table><thead><tr><th>Algorithm</th><th>Advantages</th><th>Disadvantages</th><th>Suitable Scenarios</th><th>Complexity</th></tr></thead><tbody><tr><td>Support Vector Machine (SVM)</td><td> - Effective in high-dimensional space<br> - Performs well on data with clear boundaries<br> - Memory efficient </td><td> - High computational cost for large datasets<br> - Sensitive to noise<br> - Does not provide direct probability estimates </td><td> - Text classification<br> - Image recognition<br> - Small to medium-sized complex datasets </td><td>Medium-High</td></tr><tr><td>Naive Bayes</td><td> - Fast training and prediction<br> - Performs well on small datasets<br> - Handles multi-class problems </td><td> - Assumes feature independence<br> - Inaccurate modeling for numeric features<br> - Zero-frequency problem </td><td> - Text classification/spam filtering<br> - Sentiment analysis<br> - Recommender systems </td><td>Low</td></tr><tr><td>Decision Tree</td><td> - Easy to understand and interpret<br> - No need for feature scaling<br> - Can handle both numerical and categorical features </td><td> - Prone to overfitting<br> - Unstable<br> - Bias towards dominant features </td><td> - Scenarios requiring interpretability<br> - Important feature interactions<br> - Medical diagnosis </td><td>Medium</td></tr><tr><td>Random Forest</td><td> - Reduces overfitting<br> - Provides feature importance<br> - Handles missing values </td><td> - Poor interpretability<br> - Computationally intensive<br> - Inefficient for very high-dimensional data </td><td> - High accuracy needed<br> - Feature importance analysis<br> - Financial risk assessment </td><td>Medium-High</td></tr><tr><td>Logistic Regression</td><td> - Simple and easy to implement<br> - Provides probability output<br> - Fast training </td><td> - Only for linear classification<br> - Sensitive to outliers<br> - Requires feature engineering </td><td> - Binary classification<br> - Requires probability interpretation<br> - Credit scoring </td><td>Low</td></tr><tr><td>K-Nearest Neighbors (KNN)</td><td> - Simple to implement<br> - No training required<br> - Adapts to complex decision boundaries </td><td> - High computational cost<br> - Sensitive to feature scaling<br> - Curse of dimensionality </td><td> - Recommender systems<br> - Anomaly detection<br> - Small low-dimensional datasets </td><td>Medium</td></tr><tr><td>Neural Networks</td><td> - Captures complex nonlinear relationships<br> - Automatic feature learning<br> - Highly scalable </td><td> - Computationally intensive<br> - Requires large datasets<br> - Black-box model </td><td> - Image recognition<br> - Speech recognition<br> - Complex pattern recognition </td><td>High</td></tr></tbody></table></div><h2 id="algorithm-selection-guide" tabindex="-1"><a class="header-anchor" href="#algorithm-selection-guide"><span>Algorithm Selection Guide</span></a></h2><p>Choosing the right classification algorithm requires consideration of multiple factors:</p><h3 id="data-characteristics" tabindex="-1"><a class="header-anchor" href="#data-characteristics"><span>Data Characteristics</span></a></h3><ul><li><strong>Data Size</strong>: Small datasets are suitable for Naive Bayes, Logistic Regression; large datasets are suitable for Neural Networks, Random Forest</li><li><strong>Feature Count</strong>: High-dimensional data suits SVM, Naive Bayes; low-dimensional data suits almost all algorithms</li><li><strong>Feature Type</strong>: Categorical features suit Decision Trees; mixed features suit Random Forest</li><li><strong>Linear Separability</strong>: Linearly separable data suits Logistic Regression, Linear SVM; non-linear data suits Kernel SVM, Decision Trees, Neural Networks</li></ul><h3 id="task-requirements" tabindex="-1"><a class="header-anchor" href="#task-requirements"><span>Task Requirements</span></a></h3><ul><li><strong>Interpretability</strong>: Choose Decision Trees, Logistic Regression for high interpretability; prioritize performance with Random Forest, Neural Networks</li><li><strong>Training Time</strong>: For time-sensitive scenarios, choose Naive Bayes, Logistic Regression</li><li><strong>Prediction Time</strong>: For real-time predictions, choose Decision Trees, KNN, Logistic Regression</li><li><strong>Memory Constraints</strong>: Choose Naive Bayes, linear models for resource-constrained scenarios</li></ul><h2 id="model-performance-comparison" tabindex="-1"><a class="header-anchor" href="#model-performance-comparison"><span>Model Performance Comparison</span></a></h2><p>In practice, comparing the performance of multiple models is necessary to select the best option.</p><div class="code-example"><div class="code-example__title">Code Example</div><div class="code-example__content"><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_breast_cancer</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span> cross_val_score</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVC</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> GaussianNB</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neural_network <span class="token keyword">import</span> MLPClassifier</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span> precision_score<span class="token punctuation">,</span> recall_score<span class="token punctuation">,</span> f1_score<span class="token punctuation">,</span> roc_auc_score</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipeline</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Load data</span></span>
<span class="line">data <span class="token operator">=</span> load_breast_cancer<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">X<span class="token punctuation">,</span> y <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>target</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Split into train and test sets</span></span>
<span class="line">X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create a dictionary of classifiers</span></span>
<span class="line">classifiers <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;SVM&#39;</span><span class="token punctuation">:</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;scaler&#39;</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;clf&#39;</span><span class="token punctuation">,</span> SVC<span class="token punctuation">(</span>probability<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;Naive Bayes&#39;</span><span class="token punctuation">:</span> GaussianNB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;Decision Tree&#39;</span><span class="token punctuation">:</span> DecisionTreeClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;Random Forest&#39;</span><span class="token punctuation">:</span> RandomForestClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;Logistic Regression&#39;</span><span class="token punctuation">:</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;scaler&#39;</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;clf&#39;</span><span class="token punctuation">,</span> LogisticRegression<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;KNN&#39;</span><span class="token punctuation">:</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;scaler&#39;</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;clf&#39;</span><span class="token punctuation">,</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;Neural Network&#39;</span><span class="token punctuation">:</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;scaler&#39;</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;clf&#39;</span><span class="token punctuation">,</span> MLPClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span> max_iter<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Evaluation metrics</span></span>
<span class="line">results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> name<span class="token punctuation">,</span> clf <span class="token keyword">in</span> classifiers<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># Train the model</span></span>
<span class="line">    clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Predict</span></span>
<span class="line">    y_pred <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span></span>
<span class="line">    y_prob <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Calculate evaluation metrics</span></span>
<span class="line">    accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line">    precision <span class="token operator">=</span> precision_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line">    recall <span class="token operator">=</span> recall_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line">    f1 <span class="token operator">=</span> f1_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line">    auc <span class="token operator">=</span> roc_auc_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_prob<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Cross-validation</span></span>
<span class="line">    cv_scores <span class="token operator">=</span> cross_val_score<span class="token punctuation">(</span>clf<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Store results</span></span>
<span class="line">    results<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;Accuracy&#39;</span><span class="token punctuation">:</span> accuracy<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;Precision&#39;</span><span class="token punctuation">:</span> precision<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;Recall&#39;</span><span class="token punctuation">:</span> recall<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;F1&#39;</span><span class="token punctuation">:</span> f1<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;AUC&#39;</span><span class="token punctuation">:</span> auc<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;CV&#39;</span><span class="token punctuation">:</span> cv_scores<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create a DataFrame for results</span></span>
<span class="line">results_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">.</span>T</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>results_df<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Visualization comparison</span></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">results_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Accuracy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Precision&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Recall&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AUC&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Performance Comparison of Different Classification Algorithms&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">&#39;Score&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">&#39;Algorithm&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">&#39;lower right&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><h2 id="ensemble-methods" tabindex="-1"><a class="header-anchor" href="#ensemble-methods"><span>Ensemble Methods</span></a></h2><p>Ensemble methods improve classification performance by combining multiple base models. Common ensemble methods include:</p><h3 id="voting" tabindex="-1"><a class="header-anchor" href="#voting"><span>Voting</span></a></h3><p>Combine the predictions from multiple models, either hard voting (majority vote) or soft voting (probability averaging).</p><div class="code-example"><div class="code-example__title">Code Example</div><div class="code-example__content"><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> VotingClassifier</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create base classifiers</span></span>
<span class="line">clf1 <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line">clf2 <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line">clf3 <span class="token operator">=</span> SVC<span class="token punctuation">(</span>probability<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create the voting classifier</span></span>
<span class="line">voting_clf <span class="token operator">=</span> VotingClassifier<span class="token punctuation">(</span></span>
<span class="line">    estimators<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;lr&#39;</span><span class="token punctuation">,</span> clf1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;rf&#39;</span><span class="token punctuation">,</span> clf2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;svc&#39;</span><span class="token punctuation">,</span> clf3<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    voting<span class="token operator">=</span><span class="token string">&#39;soft&#39;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Train and evaluate</span></span>
<span class="line">voting_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line">y_pred <span class="token operator">=</span> voting_clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span></span>
<span class="line">accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Voting Classifier Accuracy: </span><span class="token interpolation"><span class="token punctuation">{</span>accuracy<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><h3 id="stacking" tabindex="-1"><a class="header-anchor" href="#stacking"><span>Stacking</span></a></h3><p>Use a meta-model to combine the predictions of base models.</p><div class="code-example"><div class="code-example__title">Code Example</div><div class="code-example__content"><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> StackingClassifier</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create base classifiers</span></span>
<span class="line">estimators <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token string">&#39;rf&#39;</span><span class="token punctuation">,</span> RandomForestClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token string">&#39;svc&#39;</span><span class="token punctuation">,</span> SVC<span class="token punctuation">(</span>probability<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token string">&#39;nb&#39;</span><span class="token punctuation">,</span> GaussianNB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create the stacking classifier</span></span>
<span class="line">stacking_clf <span class="token operator">=</span> StackingClassifier<span class="token punctuation">(</span></span>
<span class="line">    estimators<span class="token operator">=</span>estimators<span class="token punctuation">,</span></span>
<span class="line">    final_estimator<span class="token operator">=</span>LogisticRegression<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Train and evaluate</span></span>
<span class="line">stacking_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line">y_pred <span class="token operator">=</span> stacking_clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span></span>
<span class="line">accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Stacking Classifier Accuracy: </span><span class="token interpolation"><span class="token punctuation">{</span>accuracy<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><div class="knowledge-card"><div class="knowledge-card__title"><span class="icon">⚠️</span>Common Pitfalls </div><div class="knowledge-card__content"><ul><li><strong>Overemphasis on Accuracy</strong>: Accuracy may be misleading on imbalanced datasets</li><li><strong>Ignoring Computational Cost</strong>: High-performance models may be impractical in deployment</li><li><strong>Blindly Using Complex Models</strong>: Simple models may be more stable and easier to maintain</li><li><strong>Neglecting Feature Engineering</strong>: Good feature engineering is often more important than algorithm selection</li><li><strong>Ignoring Model Interpretability</strong>: In many domains, interpretability is just as important as performance</li></ul></div></div><h2 id="summary-and-reflection" tabindex="-1"><a class="header-anchor" href="#summary-and-reflection"><span>Summary and Reflection</span></a></h2><p>Choosing the right classification algorithm is a critical step in the data science workflow and should consider data characteristics, task requirements, and resource constraints.</p><h3 id="key-takeaways" tabindex="-1"><a class="header-anchor" href="#key-takeaways"><span>Key Takeaways</span></a></h3><ul><li>Different classification algorithms have their own advantages, disadvantages, and suitable scenarios</li><li>Algorithm selection should consider data size, feature characteristics, task requirements, and resource constraints</li><li>Cross-validation is a reliable method for comparing model performance</li><li>Ensemble methods typically outperform individual models</li><li>Model selection should balance prediction performance, interpretability, and computational cost</li></ul><h3 id="reflection-questions" tabindex="-1"><a class="header-anchor" href="#reflection-questions"><span>Reflection Questions</span></a></h3><ol><li>When should you choose a simple model over a complex one?</li><li>How do you balance prediction performance and interpretability?</li><li>Why do ensemble methods typically improve classification performance?</li></ol>`,29)),i(a),n[1]||(n[1]=s("div",{class:"practice-link"},[s("a",{href:"/projects/classification.html",class:"button"},"Go to Practice Project")],-1))])}const k=t(c,[["render",r],["__file","comparison.html.vue"]]),m=JSON.parse('{"path":"/en/core/classification/comparison.html","title":"Classification Algorithm Comparison","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Comparison of Main Classification Algorithms","slug":"comparison-of-main-classification-algorithms","link":"#comparison-of-main-classification-algorithms","children":[]},{"level":2,"title":"Algorithm Selection Guide","slug":"algorithm-selection-guide","link":"#algorithm-selection-guide","children":[{"level":3,"title":"Data Characteristics","slug":"data-characteristics","link":"#data-characteristics","children":[]},{"level":3,"title":"Task Requirements","slug":"task-requirements","link":"#task-requirements","children":[]}]},{"level":2,"title":"Model Performance Comparison","slug":"model-performance-comparison","link":"#model-performance-comparison","children":[]},{"level":2,"title":"Ensemble Methods","slug":"ensemble-methods","link":"#ensemble-methods","children":[{"level":3,"title":"Voting","slug":"voting","link":"#voting","children":[]},{"level":3,"title":"Stacking","slug":"stacking","link":"#stacking","children":[]}]},{"level":2,"title":"Summary and Reflection","slug":"summary-and-reflection","link":"#summary-and-reflection","children":[{"level":3,"title":"Key Takeaways","slug":"key-takeaways","link":"#key-takeaways","children":[]},{"level":3,"title":"Reflection Questions","slug":"reflection-questions","link":"#reflection-questions","children":[]}]}],"git":{},"filePathRelative":"en/core/classification/comparison.md"}');export{k as comp,m as data};
