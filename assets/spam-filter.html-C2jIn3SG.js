import{_ as s,e as a,i as p,o as t}from"./app-CPyUwv8V.js";const e={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="垃圾邮件过滤器" tabindex="-1"><a class="header-anchor" href="#垃圾邮件过滤器"><span>垃圾邮件过滤器</span></a></h1><div class="knowledge-card"><div class="knowledge-card__title"><span class="icon">📚</span>项目概述 </div><div class="knowledge-card__content"><ul><li><strong>难度</strong>：中级</li><li><strong>类型</strong>：文本分类</li><li><strong>技能点</strong>：文本预处理、特征提取、朴素贝叶斯分类、模型评估</li><li><strong>对应知识模块</strong>：<a href="/core/classification/svm.html">分类算法</a></li></ul></div></div><h2 id="项目背景" tabindex="-1"><a class="header-anchor" href="#项目背景"><span>项目背景</span></a></h2><p>垃圾邮件是电子邮件系统中的一个普遍问题，每天有数十亿封垃圾邮件被发送，占全球电子邮件流量的很大一部分。这些邮件不仅浪费时间和资源，还可能包含恶意链接或欺诈内容，对用户造成安全风险。</p><p>自动垃圾邮件过滤系统使用机器学习算法来区分正常邮件和垃圾邮件，是现代电子邮件服务的核心组件。这些系统通过分析邮件内容、发件人信息和其他特征，学习识别垃圾邮件的模式。</p><p>在这个项目中，我们将构建一个基于朴素贝叶斯算法的垃圾邮件过滤器，学习如何处理文本数据并应用概率分类方法。</p><div class="knowledge-card"><div class="knowledge-card__title"><span class="icon">💡</span>你知道吗？ </div><div class="knowledge-card__content"><p>朴素贝叶斯是最早用于垃圾邮件过滤的机器学习算法之一，至今仍被广泛使用。尽管算法简单，但在文本分类任务中表现出色，特别是在训练数据有限的情况下。现代垃圾邮件过滤系统通常结合多种算法，但朴素贝叶斯仍是其中的重要组成部分。</p></div></div><h2 id="数据集介绍" tabindex="-1"><a class="header-anchor" href="#数据集介绍"><span>数据集介绍</span></a></h2><p>本项目使用的数据集包含约5,000封标记为&quot;垃圾邮件&quot;或&quot;正常邮件&quot;的电子邮件。每封邮件包含以下信息：</p><ul><li><strong>邮件内容</strong>：邮件的完整文本</li><li><strong>主题</strong>：邮件的主题行</li><li><strong>发件人</strong>：发件人的电子邮件地址</li><li><strong>日期</strong>：邮件发送的日期和时间</li><li><strong>标签</strong>：标记为&quot;spam&quot;（垃圾邮件）或&quot;ham&quot;（正常邮件）</li></ul><p>数据集已经过预处理，移除了敏感信息，但保留了垃圾邮件的典型特征。</p><h2 id="项目目标" tabindex="-1"><a class="header-anchor" href="#项目目标"><span>项目目标</span></a></h2><ol><li>实现文本数据的预处理和特征提取</li><li>构建基于朴素贝叶斯的垃圾邮件分类器</li><li>评估模型性能并优化参数</li><li>分析模型的决策过程，了解哪些特征对分类最重要</li><li>构建一个简单的垃圾邮件过滤系统</li></ol><h2 id="实施步骤" tabindex="-1"><a class="header-anchor" href="#实施步骤"><span>实施步骤</span></a></h2><h3 id="步骤1-数据加载与探索" tabindex="-1"><a class="header-anchor" href="#步骤1-数据加载与探索"><span>步骤1：数据加载与探索</span></a></h3><p>首先，我们加载数据并进行初步探索，了解数据的基本情况。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"><span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns</span>
<span class="line"><span class="token keyword">import</span> re</span>
<span class="line"><span class="token keyword">import</span> string</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token punctuation">,</span> TfidfVectorizer</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> confusion_matrix<span class="token punctuation">,</span> classification_report</span>
<span class="line"><span class="token keyword">import</span> nltk</span>
<span class="line"><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> stopwords</span>
<span class="line"><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>stem <span class="token keyword">import</span> PorterStemmer</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 下载必要的NLTK资源</span></span>
<span class="line">nltk<span class="token punctuation">.</span>download<span class="token punctuation">(</span><span class="token string">&#39;stopwords&#39;</span><span class="token punctuation">)</span></span>
<span class="line">nltk<span class="token punctuation">.</span>download<span class="token punctuation">(</span><span class="token string">&#39;punkt&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 加载数据</span></span>
<span class="line">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;email_dataset.csv&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看数据基本信息</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看标签分布</span></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>df<span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;邮件类型分布&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看邮件长度分布</span></span>
<span class="line">df<span class="token punctuation">[</span><span class="token string">&#39;content_length&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span></span>
<span class="line">df<span class="token punctuation">[</span><span class="token string">&#39;subject_length&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;subject&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">sns<span class="token punctuation">.</span>histplot<span class="token punctuation">(</span>data<span class="token operator">=</span>df<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token string">&#39;content_length&#39;</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> kde<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;邮件内容长度分布&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">sns<span class="token punctuation">.</span>histplot<span class="token punctuation">(</span>data<span class="token operator">=</span>df<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token string">&#39;subject_length&#39;</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> kde<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;邮件主题长度分布&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看常见发件人域名</span></span>
<span class="line">df<span class="token punctuation">[</span><span class="token string">&#39;sender_domain&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;sender&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token string">&#39;@&#39;</span> <span class="token keyword">in</span> x <span class="token keyword">else</span> <span class="token string">&#39;unknown&#39;</span><span class="token punctuation">)</span></span>
<span class="line">top_domains <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;sender_domain&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">top_domains<span class="token punctuation">[</span><span class="token string">&#39;total&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> top_domains<span class="token punctuation">[</span><span class="token string">&#39;spam&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> top_domains<span class="token punctuation">[</span><span class="token string">&#39;ham&#39;</span><span class="token punctuation">]</span></span>
<span class="line">top_domains <span class="token operator">=</span> top_domains<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&#39;total&#39;</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">top_domains<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;spam&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ham&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> stacked<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;常见发件人域名&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">&#39;邮件数量&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤2-文本预处理" tabindex="-1"><a class="header-anchor" href="#步骤2-文本预处理"><span>步骤2：文本预处理</span></a></h3><p>接下来，我们对邮件内容进行预处理，包括清洗文本、去除停用词和词干提取。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">preprocess_text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 转换为小写</span></span>
<span class="line">    text <span class="token operator">=</span> text<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 移除标点符号</span></span>
<span class="line">    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;[</span><span class="token interpolation"><span class="token punctuation">{</span>string<span class="token punctuation">.</span>punctuation<span class="token punctuation">}</span></span><span class="token string">]&#39;</span></span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 移除数字</span></span>
<span class="line">    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;\\d+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># 移除多余的空格</span></span>
<span class="line">    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;\\s+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 分词</span></span>
<span class="line">    words <span class="token operator">=</span> nltk<span class="token punctuation">.</span>word_tokenize<span class="token punctuation">(</span>text<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 去除停用词</span></span>
<span class="line">    stop_words <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>stopwords<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token string">&#39;english&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    words <span class="token operator">=</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word <span class="token keyword">in</span> words <span class="token keyword">if</span> word <span class="token keyword">not</span> <span class="token keyword">in</span> stop_words<span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 词干提取</span></span>
<span class="line">    stemmer <span class="token operator">=</span> PorterStemmer<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    words <span class="token operator">=</span> <span class="token punctuation">[</span>stemmer<span class="token punctuation">.</span>stem<span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>words<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 应用预处理</span></span>
<span class="line">df<span class="token punctuation">[</span><span class="token string">&#39;cleaned_content&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>preprocess_text<span class="token punctuation">)</span></span>
<span class="line">df<span class="token punctuation">[</span><span class="token string">&#39;cleaned_subject&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;subject&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>preprocess_text<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看预处理后的文本示例</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原始文本:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n预处理后:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;cleaned_content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤3-特征提取" tabindex="-1"><a class="header-anchor" href="#步骤3-特征提取"><span>步骤3：特征提取</span></a></h3><p>现在，我们使用TF-IDF向量化方法从文本中提取特征。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 将标签转换为数值</span></span>
<span class="line">df<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;ham&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;spam&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 组合主题和内容</span></span>
<span class="line">df<span class="token punctuation">[</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;cleaned_subject&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> df<span class="token punctuation">[</span><span class="token string">&#39;cleaned_content&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 分割训练集和测试集</span></span>
<span class="line">X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span></span>
<span class="line">    df<span class="token punctuation">[</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span> stratify<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用TF-IDF向量化文本</span></span>
<span class="line">vectorizer <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>max_features<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span></span>
<span class="line">X_train_tfidf <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span></span>
<span class="line">X_test_tfidf <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看特征维度</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;特征维度: </span><span class="token interpolation"><span class="token punctuation">{</span>X_train_tfidf<span class="token punctuation">.</span>shape<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看部分特征名称</span></span>
<span class="line">feature_names <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>get_feature_names_out<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;部分特征名称: </span><span class="token interpolation"><span class="token punctuation">{</span>feature_names<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">20]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤4-构建朴素贝叶斯分类器" tabindex="-1"><a class="header-anchor" href="#步骤4-构建朴素贝叶斯分类器"><span>步骤4：构建朴素贝叶斯分类器</span></a></h3><p>现在，我们使用朴素贝叶斯算法构建垃圾邮件分类器。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> MultinomialNB</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> classification_report<span class="token punctuation">,</span> confusion_matrix<span class="token punctuation">,</span> accuracy_score</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 训练朴素贝叶斯模型</span></span>
<span class="line">nb_classifier <span class="token operator">=</span> MultinomialNB<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">nb_classifier<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train_tfidf<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 在测试集上预测</span></span>
<span class="line">y_pred <span class="token operator">=</span> nb_classifier<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test_tfidf<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 评估模型性能</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;准确率:&quot;</span><span class="token punctuation">,</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n分类报告:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 可视化混淆矩阵</span></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">cm <span class="token operator">=</span> confusion_matrix<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line">sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>cm<span class="token punctuation">,</span> annot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&#39;Blues&#39;</span><span class="token punctuation">,</span> xticklabels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;Ham&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Spam&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> yticklabels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;Ham&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Spam&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">&#39;预测标签&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">&#39;真实标签&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;混淆矩阵&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤5-模型优化与特征分析" tabindex="-1"><a class="header-anchor" href="#步骤5-模型优化与特征分析"><span>步骤5：模型优化与特征分析</span></a></h3><p>接下来，我们优化模型参数并分析重要特征。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCV</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 参数优化</span></span>
<span class="line">param_grid <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;alpha&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">grid_search <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>MultinomialNB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">&#39;accuracy&#39;</span><span class="token punctuation">)</span></span>
<span class="line">grid_search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train_tfidf<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 输出最佳参数</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;最佳参数:&quot;</span><span class="token punctuation">,</span> grid_search<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;最佳交叉验证得分:&quot;</span><span class="token punctuation">,</span> grid_search<span class="token punctuation">.</span>best_score_<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用最佳参数的模型</span></span>
<span class="line">best_nb <span class="token operator">=</span> grid_search<span class="token punctuation">.</span>best_estimator_</span>
<span class="line">y_pred_best <span class="token operator">=</span> best_nb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test_tfidf<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 评估优化后的模型</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n优化后的模型性能:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;准确率:&quot;</span><span class="token punctuation">,</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_best<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n分类报告:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_best<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 分析重要特征</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">get_most_informative_features</span><span class="token punctuation">(</span>vectorizer<span class="token punctuation">,</span> classifier<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    feature_names <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>get_feature_names_out<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    coefs_with_fnames <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>classifier<span class="token punctuation">.</span>coef_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> feature_names<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    top_negative <span class="token operator">=</span> coefs_with_fnames<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span></span>
<span class="line">    top_positive <span class="token operator">=</span> coefs_with_fnames<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">return</span> top_positive<span class="token punctuation">,</span> top_negative</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 获取垃圾邮件和正常邮件的重要特征</span></span>
<span class="line">top_spam_features<span class="token punctuation">,</span> top_ham_features <span class="token operator">=</span> get_most_informative_features<span class="token punctuation">(</span>vectorizer<span class="token punctuation">,</span> best_nb<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 可视化重要特征</span></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">y_pos <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>top_spam_features<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>barh<span class="token punctuation">(</span>y_pos<span class="token punctuation">,</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> top_spam_features<span class="token punctuation">]</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">&#39;center&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>y_pos<span class="token punctuation">,</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> top_spam_features<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;垃圾邮件重要特征&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">y_pos <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>top_ham_features<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>barh<span class="token punctuation">(</span>y_pos<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token builtin">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> top_ham_features<span class="token punctuation">]</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">&#39;center&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>y_pos<span class="token punctuation">,</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> top_ham_features<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;正常邮件重要特征&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤6-构建简单的垃圾邮件过滤系统" tabindex="-1"><a class="header-anchor" href="#步骤6-构建简单的垃圾邮件过滤系统"><span>步骤6：构建简单的垃圾邮件过滤系统</span></a></h3><p>最后，我们构建一个简单的垃圾邮件过滤系统，可以对新邮件进行分类。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">predict_email</span><span class="token punctuation">(</span>email_content<span class="token punctuation">,</span> email_subject<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> threshold<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 预处理</span></span>
<span class="line">    cleaned_content <span class="token operator">=</span> preprocess_text<span class="token punctuation">(</span>email_content<span class="token punctuation">)</span></span>
<span class="line">    cleaned_subject <span class="token operator">=</span> preprocess_text<span class="token punctuation">(</span>email_subject<span class="token punctuation">)</span> <span class="token keyword">if</span> email_subject <span class="token keyword">else</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    combined_text <span class="token operator">=</span> cleaned_subject <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> cleaned_content</span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 向量化</span></span>
<span class="line">    email_tfidf <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token punctuation">[</span>combined_text<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 预测概率</span></span>
<span class="line">    spam_prob <span class="token operator">=</span> best_nb<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>email_tfidf<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 根据阈值判断</span></span>
<span class="line">    is_spam <span class="token operator">=</span> spam_prob <span class="token operator">&gt;</span> threshold</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;is_spam&#39;</span><span class="token punctuation">:</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>is_spam<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;spam_probability&#39;</span><span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">(</span>spam_prob<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;prediction&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Spam&#39;</span> <span class="token keyword">if</span> is_spam <span class="token keyword">else</span> <span class="token string">&#39;Ham&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 测试系统</span></span>
<span class="line">test_emails <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;subject&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Meeting tomorrow&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;content&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Hi team, just a reminder that we have a meeting scheduled for tomorrow at 10am. Please prepare your weekly reports.&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;subject&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;URGENT: Your account has been compromised&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;content&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Dear valued customer, your account has been compromised. Click here to verify your information and claim your $1000 reward immediately!&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;subject&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Free Viagra and Cialis&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;content&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Best prices on the market! Buy now and get 90% discount on all products. Limited time offer!&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> i<span class="token punctuation">,</span> email <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>test_emails<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    result <span class="token operator">=</span> predict_email<span class="token punctuation">(</span>email<span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> email<span class="token punctuation">[</span><span class="token string">&#39;subject&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Email </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">:&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Subject: </span><span class="token interpolation"><span class="token punctuation">{</span>email<span class="token punctuation">[</span><span class="token string">&#39;subject&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Content: </span><span class="token interpolation"><span class="token punctuation">{</span>email<span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">100]</span><span class="token punctuation">}</span></span><span class="token string">...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Prediction: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">[</span><span class="token string">&#39;prediction&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Spam Probability: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">[</span><span class="token string">&#39;spam_probability&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span> <span class="token operator">*</span> <span class="token number">80</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结果分析" tabindex="-1"><a class="header-anchor" href="#结果分析"><span>结果分析</span></a></h2><p>通过实施这个项目，我们成功构建了一个垃圾邮件过滤系统，能够有效区分正常邮件和垃圾邮件。模型在测试集上取得了约95%的准确率，表明我们的方法是有效的。</p><p>分析重要特征发现，垃圾邮件通常包含&quot;free&quot;、&quot;offer&quot;、&quot;money&quot;、&quot;discount&quot;等词汇，而正常邮件则包含更多的个人交流和工作相关词汇。这与我们的直觉相符，也验证了模型学习到了有意义的模式。</p><p>参数优化显示，适当调整朴素贝叶斯的平滑参数可以进一步提高模型性能。最终的系统能够为新邮件提供垃圾邮件概率，使用户可以根据自己的需求调整过滤阈值。</p><h2 id="进阶挑战" tabindex="-1"><a class="header-anchor" href="#进阶挑战"><span>进阶挑战</span></a></h2><p>如果你已经完成了基本任务，可以尝试以下进阶挑战：</p><ol><li><strong>特征工程进阶</strong>：尝试使用n-gram特征、词性标注或实体识别等高级文本特征</li><li><strong>模型比较</strong>：比较朴素贝叶斯与SVM、随机森林等其他分类算法的性能</li><li><strong>在线学习</strong>：实现一个能够从用户反馈中不断学习的系统</li><li><strong>多语言支持</strong>：扩展系统以支持多种语言的垃圾邮件检测</li><li><strong>部署应用</strong>：将模型部署为Web应用或邮件客户端插件</li></ol><h2 id="小结与反思" tabindex="-1"><a class="header-anchor" href="#小结与反思"><span>小结与反思</span></a></h2><p>通过这个项目，我们学习了如何处理文本数据并应用朴素贝叶斯算法构建垃圾邮件过滤器。文本分类是自然语言处理的基础任务，掌握这些技能可以应用于情感分析、主题分类等多种场景。</p><p>在实际应用中，垃圾邮件过滤系统需要不断更新以应对新的垃圾邮件模式。垃圾邮件发送者也在不断调整策略以逃避过滤，这形成了一种&quot;军备竞赛&quot;。因此，实际系统通常结合多种技术，并定期更新模型。</p><h3 id="思考问题" tabindex="-1"><a class="header-anchor" href="#思考问题"><span>思考问题</span></a></h3><ol><li>如何平衡垃圾邮件过滤的精确性和召回率？错误分类的成本是什么？</li><li>朴素贝叶斯算法假设特征之间相互独立，但文本中的词汇显然不是独立的。为什么朴素贝叶斯在文本分类中仍然表现良好？</li><li>如何处理垃圾邮件发送者使用的规避技术，如故意拼写错误、使用图片而非文本等？</li></ol><div class="practice-link"><a href="/projects/classification/credit-risk.html" class="button">下一个项目：信用风险评估</a></div>`,45)]))}const i=s(e,[["render",l],["__file","spam-filter.html.vue"]]),u=JSON.parse('{"path":"/projects/classification/spam-filter.html","title":"垃圾邮件过滤器","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"项目背景","slug":"项目背景","link":"#项目背景","children":[]},{"level":2,"title":"数据集介绍","slug":"数据集介绍","link":"#数据集介绍","children":[]},{"level":2,"title":"项目目标","slug":"项目目标","link":"#项目目标","children":[]},{"level":2,"title":"实施步骤","slug":"实施步骤","link":"#实施步骤","children":[{"level":3,"title":"步骤1：数据加载与探索","slug":"步骤1-数据加载与探索","link":"#步骤1-数据加载与探索","children":[]},{"level":3,"title":"步骤2：文本预处理","slug":"步骤2-文本预处理","link":"#步骤2-文本预处理","children":[]},{"level":3,"title":"步骤3：特征提取","slug":"步骤3-特征提取","link":"#步骤3-特征提取","children":[]},{"level":3,"title":"步骤4：构建朴素贝叶斯分类器","slug":"步骤4-构建朴素贝叶斯分类器","link":"#步骤4-构建朴素贝叶斯分类器","children":[]},{"level":3,"title":"步骤5：模型优化与特征分析","slug":"步骤5-模型优化与特征分析","link":"#步骤5-模型优化与特征分析","children":[]},{"level":3,"title":"步骤6：构建简单的垃圾邮件过滤系统","slug":"步骤6-构建简单的垃圾邮件过滤系统","link":"#步骤6-构建简单的垃圾邮件过滤系统","children":[]}]},{"level":2,"title":"结果分析","slug":"结果分析","link":"#结果分析","children":[]},{"level":2,"title":"进阶挑战","slug":"进阶挑战","link":"#进阶挑战","children":[]},{"level":2,"title":"小结与反思","slug":"小结与反思","link":"#小结与反思","children":[{"level":3,"title":"思考问题","slug":"思考问题","link":"#思考问题","children":[]}]}],"git":{},"filePathRelative":"projects/classification/spam-filter.md"}');export{i as comp,u as data};
