import{_ as s,e as a,i as t,o as e}from"./app-BgnGfOJp.js";const p={};function i(l,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="titanic-survival-prediction" tabindex="-1"><a class="header-anchor" href="#titanic-survival-prediction"><span>Titanic Survival Prediction</span></a></h1><div class="knowledge-card"><div class="knowledge-card__title"><span class="icon">📚</span> Project Overview </div><div class="knowledge-card__content"><ul><li><strong>Difficulty</strong>: Beginner level</li><li><strong>Type</strong>: Binary classification</li><li><strong>Skills</strong>: Data cleaning, feature engineering, classification algorithms, model evaluation</li><li><strong>Related knowledge module</strong>: <a href="/en/core/classification/svm.html">Classification algorithms</a></li></ul></div></div><h2 id="project-background" tabindex="-1"><a class="header-anchor" href="#project-background"><span>Project Background</span></a></h2><p>On April 15, 1912, the luxury passenger liner Titanic, famously known as the &quot;unsinkable ship,&quot; collided with an iceberg and sank during its maiden voyage. Of the 2,224 passengers and crew, 1,502 lost their lives. This tragedy shocked the world and led to improvements in maritime safety regulations.</p><p>In this project, we will analyze the passenger data from the Titanic and attempt to answer the question, &quot;Which types of people were more likely to survive?&quot; By building a predictive model, we can identify key factors that influenced survival rates.</p><div class="knowledge-card"><div class="knowledge-card__title"><span class="icon">💡</span> Did you know? </div><div class="knowledge-card__content"><p>The sinking of the Titanic demonstrated the impact of social class in disasters. The &quot;women and children first&quot; policy and the different locations of cabins led to significant differences in survival rates. First-class passengers had a survival rate of about 62%, second-class passengers had a survival rate of 41%, and third-class passengers had a survival rate of only 25%.</p></div></div><h2 id="dataset-introduction" tabindex="-1"><a class="header-anchor" href="#dataset-introduction"><span>Dataset Introduction</span></a></h2><p>The dataset used in this project contains information about 891 passengers aboard the Titanic. Each passenger&#39;s record includes the following features:</p><ul><li><strong>PassengerId</strong>: Passenger ID</li><li><strong>Survived</strong>: Survival status (0 = No, 1 = Yes)</li><li><strong>Pclass</strong>: Ticket class (1 = First class, 2 = Second class, 3 = Third class)</li><li><strong>Name</strong>: Passenger&#39;s name</li><li><strong>Sex</strong>: Gender</li><li><strong>Age</strong>: Age</li><li><strong>SibSp</strong>: Number of siblings/spouses aboard</li><li><strong>Parch</strong>: Number of parents/children aboard</li><li><strong>Ticket</strong>: Ticket number</li><li><strong>Fare</strong>: Ticket fare</li><li><strong>Cabin</strong>: Cabin number</li><li><strong>Embarked</strong>: Embarkation port (C = Cherbourg, Q = Queenstown, S = Southampton)</li></ul><p>There are some missing values in the dataset, especially in the Age, Cabin, and Embarked features. Handling these missing values will be an important part of the data preprocessing.</p><h2 id="project-goals" tabindex="-1"><a class="header-anchor" href="#project-goals"><span>Project Goals</span></a></h2><ol><li>Explore and analyze Titanic passenger data.</li><li>Handle missing values and prepare features.</li><li>Build a classification model to predict passenger survival.</li><li>Evaluate model performance and interpret results.</li><li>Submit prediction results.</li></ol><h2 id="implementation-steps" tabindex="-1"><a class="header-anchor" href="#implementation-steps"><span>Implementation Steps</span></a></h2><h3 id="step-1-data-exploration-and-visualization" tabindex="-1"><a class="header-anchor" href="#step-1-data-exploration-and-visualization"><span>Step 1: Data Exploration and Visualization</span></a></h3><p>First, we need to load the data and conduct an initial exploration to understand the basic features and distribution of the data.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"><span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns</span>
<span class="line"><span class="token operator">%</span>matplotlib inline</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Load the data</span></span>
<span class="line">train_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;titanic_train.csv&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># View basic information about the data</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>train_data<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></span>
<span class="line">train_data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Check for missing values</span></span>
<span class="line">train_data<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Basic statistical description</span></span>
<span class="line">train_data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Overview of survival rate</span></span>
<span class="line">train_data<span class="token punctuation">[</span><span class="token string">&#39;Survived&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Visualize the relationship between different features and survival rate</span></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">131</span><span class="token punctuation">)</span></span>
<span class="line">sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">&#39;Sex&#39;</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">&#39;Survived&#39;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>train_data<span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Survival Rate by Gender&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">132</span><span class="token punctuation">)</span></span>
<span class="line">sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">&#39;Pclass&#39;</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">&#39;Survived&#39;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>train_data<span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Survival Rate by Passenger Class&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">133</span><span class="token punctuation">)</span></span>
<span class="line">sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">&#39;Embarked&#39;</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">&#39;Survived&#39;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>train_data<span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Survival Rate by Embarkation Port&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step-2-data-preprocessing" tabindex="-1"><a class="header-anchor" href="#step-2-data-preprocessing"><span>Step 2: Data Preprocessing</span></a></h3><p>Next, we need to handle the missing values and convert categorical features into formats that are usable by the model.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># Handle missing age data</span></span>
<span class="line">age_median <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">&#39;Age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">train_data<span class="token punctuation">[</span><span class="token string">&#39;Age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>age_median<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Handle missing embarkation port data</span></span>
<span class="line">embarked_mode <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">&#39;Embarked&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">train_data<span class="token punctuation">[</span><span class="token string">&#39;Embarked&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>embarked_mode<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create new feature: Family size</span></span>
<span class="line">train_data<span class="token punctuation">[</span><span class="token string">&#39;FamilySize&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">&#39;SibSp&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> train_data<span class="token punctuation">[</span><span class="token string">&#39;Parch&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create new feature: Traveling alone</span></span>
<span class="line">train_data<span class="token punctuation">[</span><span class="token string">&#39;IsAlone&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>train_data<span class="token punctuation">[</span><span class="token string">&#39;FamilySize&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Extract titles from names</span></span>
<span class="line">train_data<span class="token punctuation">[</span><span class="token string">&#39;Title&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">&#39; ([A-Za-z]+)\\.&#39;</span><span class="token punctuation">,</span> expand<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Map titles to categories</span></span>
<span class="line">title_mapping <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;Mr&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mr&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Miss&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Miss&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Mrs&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mrs&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Master&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Master&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Dr&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Officer&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Rev&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Officer&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Col&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Officer&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Major&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Officer&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Mlle&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Miss&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Mme&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mrs&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Don&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Royalty&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Lady&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Royalty&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Countess&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Royalty&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Jonkheer&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Royalty&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Sir&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Royalty&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Capt&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Officer&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;Ms&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Mrs&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">train_data<span class="token punctuation">[</span><span class="token string">&#39;Title&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">&#39;Title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>title_mapping<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Select features to use</span></span>
<span class="line">features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Pclass&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sex&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Fare&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Embarked&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;FamilySize&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;IsAlone&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Title&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Perform one-hot encoding for categorical features</span></span>
<span class="line">train_encoded <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span>features<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Prepare feature matrix and target variable</span></span>
<span class="line">X <span class="token operator">=</span> train_encoded</span>
<span class="line">y <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">&#39;Survived&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step-3-model-building-and-evaluation" tabindex="-1"><a class="header-anchor" href="#step-3-model-building-and-evaluation"><span>Step 3: Model Building and Evaluation</span></a></h3><p>Now, we can build classification models and evaluate their performance.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span> cross_val_score</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVC</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span> confusion_matrix<span class="token punctuation">,</span> classification_report</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Split the data into training and validation sets</span></span>
<span class="line">X_train<span class="token punctuation">,</span> X_val<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_val <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Decision tree model</span></span>
<span class="line">dt_model <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line">dt_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line">dt_pred <span class="token operator">=</span> dt_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_val<span class="token punctuation">)</span></span>
<span class="line">dt_accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>y_val<span class="token punctuation">,</span> dt_pred<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Decision Tree accuracy: </span><span class="token interpolation"><span class="token punctuation">{</span>dt_accuracy<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Random forest model</span></span>
<span class="line">rf_model <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line">rf_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line">rf_pred <span class="token operator">=</span> rf_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_val<span class="token punctuation">)</span></span>
<span class="line">rf_accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>y_val<span class="token punctuation">,</span> rf_pred<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Random Forest accuracy: </span><span class="token interpolation"><span class="token punctuation">{</span>rf_accuracy<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># SVM model</span></span>
<span class="line">svm_model <span class="token operator">=</span> SVC<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">&#39;rbf&#39;</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line">svm_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line">svm_pred <span class="token operator">=</span> svm_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_val<span class="token punctuation">)</span></span>
<span class="line">svm_accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>y_val<span class="token punctuation">,</span> svm_pred<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;SVM accuracy: </span><span class="token interpolation"><span class="token punctuation">{</span>svm_accuracy<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Cross-validation</span></span>
<span class="line">models <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;Decision Tree&#39;</span><span class="token punctuation">:</span> DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;Random Forest&#39;</span><span class="token punctuation">:</span> RandomForestClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;SVM&#39;</span><span class="token punctuation">:</span> SVC<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">&#39;rbf&#39;</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> name<span class="token punctuation">,</span> model <span class="token keyword">in</span> models<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    scores <span class="token operator">=</span> cross_val_score<span class="token punctuation">(</span>model<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">&#39;accuracy&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> cross-validation accuracy: </span><span class="token interpolation"><span class="token punctuation">{</span>scores<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string"> ± </span><span class="token interpolation"><span class="token punctuation">{</span>scores<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># View confusion matrix and classification report for the best model</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Random Forest Confusion Matrix:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>confusion_matrix<span class="token punctuation">(</span>y_val<span class="token punctuation">,</span> rf_pred<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nRandom Forest Classification Report:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>y_val<span class="token punctuation">,</span> rf_pred<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Feature importance</span></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">importances <span class="token operator">=</span> rf_model<span class="token punctuation">.</span>feature_importances_</span>
<span class="line">indices <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>importances<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> importances<span class="token punctuation">[</span>indices<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> X<span class="token punctuation">.</span>columns<span class="token punctuation">[</span>indices<span class="token punctuation">]</span><span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Feature Importances&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step-4-model-optimization" tabindex="-1"><a class="header-anchor" href="#step-4-model-optimization"><span>Step 4: Model Optimization</span></a></h3><p>We can further improve the model&#39;s performance through hyperparameter tuning.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCV</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Random forest parameter grid</span></span>
<span class="line">param_grid <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;n_estimators&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;max_depth&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;min_samples_split&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;min_samples_leaf&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Grid search</span></span>
<span class="line">grid_search <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>RandomForestClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">                           param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">&#39;accuracy&#39;</span><span class="token punctuation">)</span></span>
<span class="line">grid_search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Best parameters</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Best parameters:&quot;</span><span class="token punctuation">,</span> grid_search<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Best cross-validation score:&quot;</span><span class="token punctuation">,</span> grid_search<span class="token punctuation">.</span>best_score_<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Use the best model</span></span>
<span class="line">best_rf_model <span class="token operator">=</span> grid_search<span class="token punctuation">.</span>best_estimator_</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step-5-predicting-on-the-test-set" tabindex="-1"><a class="header-anchor" href="#step-5-predicting-on-the-test-set"><span>Step 5: Predicting on the Test Set</span></a></h3><p>Finally, we use the best model to make predictions on the test set.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># Load the test data</span></span>
<span class="line">test_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;titanic_test.csv&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Preprocess the test data (repeat the preprocessing steps above)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Predict with the best model</span></span>
<span class="line">test_predictions <span class="token operator">=</span> best_rf_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_encoded<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create a submission file</span></span>
<span class="line">submission <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;PassengerId&#39;</span><span class="token punctuation">:</span> test_data<span class="token punctuation">[</span><span class="token string">&#39;PassengerId&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;Survived&#39;</span><span class="token punctuation">:</span> test_predictions</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">submission<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">&#39;titanic_submission.csv&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="results-analysis" tabindex="-1"><a class="header-anchor" href="#results-analysis"><span>Results Analysis</span></a></h2><p>Through our analysis and modeling, we found the following factors significantly influenced Titanic passengers&#39; survival rates:</p><ol><li><strong>Gender</strong>: Women had a significantly higher survival rate than men.</li><li><strong>Passenger Class</strong>: First-class passengers had a higher survival rate than second and third-class passengers.</li><li><strong>Age</strong>: Children had a higher survival rate than adults.</li><li><strong>Family Size</strong>: Passengers from medium-sized families had a higher survival rate.</li><li><strong>Title</strong>: Titles reflecting social status were associated with survival rates.</li></ol><p>These findings align with historical records, reflecting the &quot;women and children first&quot; policy and the impact of social class on survival chances.</p><h2 id="advanced-challenges" tabindex="-1"><a class="header-anchor" href="#advanced-challenges"><span>Advanced Challenges</span></a></h2><p>If you&#39;ve completed the basic tasks, you can try the following advanced challenges:</p><ol><li><strong>Feature Engineering</strong>: Try creating more meaningful features, such as fare range, age groups, etc.</li><li><strong>Model Ensemble</strong>: Use voting or stacking methods to combine predictions from multiple models.</li><li><strong>Survival Probability Analysis</strong>: Instead of predicting survival, analyze survival probabilities for different feature combinations.</li><li><strong>Visualization</strong>: Create more advanced visualizations, such as decision tree visualizations or survival heatmaps.</li><li><strong>Missing Value Handling</strong>: Try more complex methods for handling missing values, such as imputation based on similar passengers&#39; features.</li></ol><h2 id="conclusion-and-reflection" tabindex="-1"><a class="header-anchor" href="#conclusion-and-reflection"><span>Conclusion and Reflection</span></a></h2><p>Through this project, we learned how to handle a complete classification problem, from data exploration to model deployment. The Titanic dataset, although small, contains common challenges in data mining, such as handling missing values, feature engineering, and model selection.</p><p>In practical applications, such analysis can help us understand the key factors influencing a particular outcome, leading to more effective strategies and policies. For example, in disaster management, similar analyses can help identify high-risk groups and prioritize resource allocation.</p><h3 id="reflective-questions" tabindex="-1"><a class="header-anchor" href="#reflective-questions"><span>Reflective Questions</span></a></h3><ol><li>Does our model exhibit any biases? How can we ensure fairness in predictions?</li><li>How can we apply this analysis approach to predict other disasters or events?</li><li>Besides accuracy, what other metrics can we use to evaluate model effectiveness?</li></ol><div class="practice-link"><a href="/en/projects/classification/spam-filter.html" class="button">Next item: Spam filter</a></div>`,41)]))}const c=s(p,[["render",i],["__file","titanic.html.vue"]]),u=JSON.parse('{"path":"/en/projects/classification/titanic.html","title":"Titanic Survival Prediction","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Project Background","slug":"project-background","link":"#project-background","children":[]},{"level":2,"title":"Dataset Introduction","slug":"dataset-introduction","link":"#dataset-introduction","children":[]},{"level":2,"title":"Project Goals","slug":"project-goals","link":"#project-goals","children":[]},{"level":2,"title":"Implementation Steps","slug":"implementation-steps","link":"#implementation-steps","children":[{"level":3,"title":"Step 1: Data Exploration and Visualization","slug":"step-1-data-exploration-and-visualization","link":"#step-1-data-exploration-and-visualization","children":[]},{"level":3,"title":"Step 2: Data Preprocessing","slug":"step-2-data-preprocessing","link":"#step-2-data-preprocessing","children":[]},{"level":3,"title":"Step 3: Model Building and Evaluation","slug":"step-3-model-building-and-evaluation","link":"#step-3-model-building-and-evaluation","children":[]},{"level":3,"title":"Step 4: Model Optimization","slug":"step-4-model-optimization","link":"#step-4-model-optimization","children":[]},{"level":3,"title":"Step 5: Predicting on the Test Set","slug":"step-5-predicting-on-the-test-set","link":"#step-5-predicting-on-the-test-set","children":[]}]},{"level":2,"title":"Results Analysis","slug":"results-analysis","link":"#results-analysis","children":[]},{"level":2,"title":"Advanced Challenges","slug":"advanced-challenges","link":"#advanced-challenges","children":[]},{"level":2,"title":"Conclusion and Reflection","slug":"conclusion-and-reflection","link":"#conclusion-and-reflection","children":[{"level":3,"title":"Reflective Questions","slug":"reflective-questions","link":"#reflective-questions","children":[]}]}],"git":{"updatedTime":1742831857000,"contributors":[{"name":"like45599","username":"like45599","email":"131803211+like45599@users.noreply.github.com","commits":2,"url":"https://github.com/like45599"}],"changelog":[{"hash":"2bc457cfaf02a69e1673760e9106a75f7cced3da","time":1742831857000,"email":"131803211+like45599@users.noreply.github.com","author":"Yun Feng","message":"优化跳转地址+更新网站icon"},{"hash":"61a31e55d1325755fa12a32e909ee09c3ac0a20f","time":1742460681000,"email":"131803211+like45599@users.noreply.github.com","author":"Yun Feng","message":"数据挖掘指南v1.0"}]},"filePathRelative":"en/projects/classification/titanic.md"}');export{c as comp,u as data};
