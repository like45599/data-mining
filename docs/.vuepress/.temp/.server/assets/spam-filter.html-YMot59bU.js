import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "../app.C2n1Acj7.mjs";
import "@vuepress/shared";
import "vue-router";
import "@vueuse/core";
import "@vue/devtools-api";
const _sfc_main = {};
function _sfc_ssrRender(_ctx, _push, _parent, _attrs) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="spam-filter" tabindex="-1"><a class="header-anchor" href="#spam-filter"><span>Spam Filter</span></a></h1><div class="knowledge-card"><div class="knowledge-card__title"><span class="icon">📚</span>Project Overview </div><div class="knowledge-card__content"><ul><li><strong>Difficulty</strong>: Intermediate</li><li><strong>Type</strong>: Text Classification</li><li><strong>Skills</strong>: Text Preprocessing, Feature Extraction, Naive Bayes Classification, Model Evaluation</li><li><strong>Relevant Knowledge Module</strong>: <a href="/en/core/classification/svm.html">Classification Algorithms</a></li></ul></div></div><h2 id="project-background" tabindex="-1"><a class="header-anchor" href="#project-background"><span>Project Background</span></a></h2><p>Spam is a common issue in email systems, with billions of spam emails being sent daily, making up a large portion of global email traffic. These emails not only waste time and resources but may also contain malicious links or fraudulent content, posing security risks to users.</p><p>Automated spam filtering systems use machine learning algorithms to differentiate between normal and spam emails. These systems analyze the content of the email, sender information, and other features to learn to identify spam patterns.</p><p>In this project, we will build a spam filter based on the Naive Bayes algorithm, learning how to process text data and apply probabilistic classification methods.</p><div class="knowledge-card"><div class="knowledge-card__title"><span class="icon">💡</span>Did You Know? </div><div class="knowledge-card__content"><p>Naive Bayes was one of the first machine learning algorithms used for spam filtering and is still widely used today. Despite its simplicity, it performs excellently in text classification tasks, especially when training data is limited. Modern spam filtering systems often combine multiple algorithms, but Naive Bayes remains an important component.</p></div></div><h2 id="dataset-introduction" tabindex="-1"><a class="header-anchor" href="#dataset-introduction"><span>Dataset Introduction</span></a></h2><p>The dataset used in this project contains approximately 5,000 emails labeled as either &quot;spam&quot; or &quot;ham&quot; (normal emails). Each email includes the following information:</p><ul><li><strong>Content</strong>: The full text of the email</li><li><strong>Subject</strong>: The subject line of the email</li><li><strong>Sender</strong>: The sender&#39;s email address</li><li><strong>Date</strong>: The date and time the email was sent</li><li><strong>Label</strong>: Labeled as &quot;spam&quot; or &quot;ham&quot;</li></ul><p>The dataset has been preprocessed to remove sensitive information but retains the typical characteristics of spam emails.</p><h2 id="project-goals" tabindex="-1"><a class="header-anchor" href="#project-goals"><span>Project Goals</span></a></h2><ol><li>Implement text data preprocessing and feature extraction</li><li>Build a Naive Bayes-based spam classifier</li><li>Evaluate model performance and optimize parameters</li><li>Analyze the decision-making process of the model and identify which features are most important for classification</li><li>Build a simple spam filtering system</li></ol><h2 id="implementation-steps" tabindex="-1"><a class="header-anchor" href="#implementation-steps"><span>Implementation Steps</span></a></h2><h3 id="step-1-data-loading-and-exploration" tabindex="-1"><a class="header-anchor" href="#step-1-data-loading-and-exploration"><span>Step 1: Data Loading and Exploration</span></a></h3><p>First, we load the data and perform preliminary exploration to understand the basic information about the data.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"><span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns</span>
<span class="line"><span class="token keyword">import</span> re</span>
<span class="line"><span class="token keyword">import</span> string</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token punctuation">,</span> TfidfVectorizer</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> confusion_matrix<span class="token punctuation">,</span> classification_report</span>
<span class="line"><span class="token keyword">import</span> nltk</span>
<span class="line"><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> stopwords</span>
<span class="line"><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>stem <span class="token keyword">import</span> PorterStemmer</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Download necessary NLTK resources</span></span>
<span class="line">nltk<span class="token punctuation">.</span>download<span class="token punctuation">(</span><span class="token string">&#39;stopwords&#39;</span><span class="token punctuation">)</span></span>
<span class="line">nltk<span class="token punctuation">.</span>download<span class="token punctuation">(</span><span class="token string">&#39;punkt&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Load data</span></span>
<span class="line">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;email_dataset.csv&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># View basic data information</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># View label distribution</span></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>df<span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Email Type Distribution&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># View email length distribution</span></span>
<span class="line">df<span class="token punctuation">[</span><span class="token string">&#39;content_length&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span></span>
<span class="line">df<span class="token punctuation">[</span><span class="token string">&#39;subject_length&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;subject&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">sns<span class="token punctuation">.</span>histplot<span class="token punctuation">(</span>data<span class="token operator">=</span>df<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token string">&#39;content_length&#39;</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> kde<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Email Content Length Distribution&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">sns<span class="token punctuation">.</span>histplot<span class="token punctuation">(</span>data<span class="token operator">=</span>df<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token string">&#39;subject_length&#39;</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> kde<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Email Subject Length Distribution&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># View common sender domains</span></span>
<span class="line">df<span class="token punctuation">[</span><span class="token string">&#39;sender_domain&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;sender&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token string">&#39;@&#39;</span> <span class="token keyword">in</span> x <span class="token keyword">else</span> <span class="token string">&#39;unknown&#39;</span><span class="token punctuation">)</span></span>
<span class="line">top_domains <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;sender_domain&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">top_domains<span class="token punctuation">[</span><span class="token string">&#39;total&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> top_domains<span class="token punctuation">[</span><span class="token string">&#39;spam&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> top_domains<span class="token punctuation">[</span><span class="token string">&#39;ham&#39;</span><span class="token punctuation">]</span></span>
<span class="line">top_domains <span class="token operator">=</span> top_domains<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&#39;total&#39;</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">top_domains<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;spam&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ham&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> stacked<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Most Common Sender Domains&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">&#39;Email Count&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step-2-text-preprocessing" tabindex="-1"><a class="header-anchor" href="#step-2-text-preprocessing"><span>Step 2: Text Preprocessing</span></a></h3><p>Next, we preprocess the email content, which involves cleaning the text, removing stopwords, and performing stemming.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">preprocess_text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># Convert to lowercase</span></span>
<span class="line">    text <span class="token operator">=</span> text<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># Remove punctuation</span></span>
<span class="line">    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;[</span><span class="token interpolation"><span class="token punctuation">{</span>string<span class="token punctuation">.</span>punctuation<span class="token punctuation">}</span></span><span class="token string">]&#39;</span></span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># Remove numbers</span></span>
<span class="line">    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;\\d+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># Remove extra spaces</span></span>
<span class="line">    text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;\\s+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Tokenization</span></span>
<span class="line">    words <span class="token operator">=</span> nltk<span class="token punctuation">.</span>word_tokenize<span class="token punctuation">(</span>text<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Remove stopwords</span></span>
<span class="line">    stop_words <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>stopwords<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token string">&#39;english&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    words <span class="token operator">=</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word <span class="token keyword">in</span> words <span class="token keyword">if</span> word <span class="token keyword">not</span> <span class="token keyword">in</span> stop_words<span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Stemming</span></span>
<span class="line">    stemmer <span class="token operator">=</span> PorterStemmer<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    words <span class="token operator">=</span> <span class="token punctuation">[</span>stemmer<span class="token punctuation">.</span>stem<span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>words<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Apply preprocessing</span></span>
<span class="line">df<span class="token punctuation">[</span><span class="token string">&#39;cleaned_content&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>preprocess_text<span class="token punctuation">)</span></span>
<span class="line">df<span class="token punctuation">[</span><span class="token string">&#39;cleaned_subject&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;subject&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>preprocess_text<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># View preprocessed text examples</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Original Text:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nPreprocessed:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;cleaned_content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step-3-feature-extraction" tabindex="-1"><a class="header-anchor" href="#step-3-feature-extraction"><span>Step 3: Feature Extraction</span></a></h3><p>Now, we extract features from the text using the TF-IDF vectorization method.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># Convert labels to numeric</span></span>
<span class="line">df<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;ham&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;spam&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Combine subject and content</span></span>
<span class="line">df<span class="token punctuation">[</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;cleaned_subject&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> df<span class="token punctuation">[</span><span class="token string">&#39;cleaned_content&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Split into train and test sets</span></span>
<span class="line">X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span></span>
<span class="line">    df<span class="token punctuation">[</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span> stratify<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Use TF-IDF vectorization</span></span>
<span class="line">vectorizer <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>max_features<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span></span>
<span class="line">X_train_tfidf <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span></span>
<span class="line">X_test_tfidf <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># View feature dimensions</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Feature Dimensions: </span><span class="token interpolation"><span class="token punctuation">{</span>X_train_tfidf<span class="token punctuation">.</span>shape<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># View some feature names</span></span>
<span class="line">feature_names <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>get_feature_names_out<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Some Feature Names: </span><span class="token interpolation"><span class="token punctuation">{</span>feature_names<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">20]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step-4-build-naive-bayes-classifier" tabindex="-1"><a class="header-anchor" href="#step-4-build-naive-bayes-classifier"><span>Step 4: Build Naive Bayes Classifier</span></a></h3><p>Now, we use the Naive Bayes algorithm to build the spam classifier.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> MultinomialNB</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> classification_report<span class="token punctuation">,</span> confusion_matrix<span class="token punctuation">,</span> accuracy_score</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Train Naive Bayes model</span></span>
<span class="line">nb_classifier <span class="token operator">=</span> MultinomialNB<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">nb_classifier<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train_tfidf<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Predict on test set</span></span>
<span class="line">y_pred <span class="token operator">=</span> nb_classifier<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test_tfidf<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Evaluate model performance</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Accuracy:&quot;</span><span class="token punctuation">,</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nClassification Report:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Visualize confusion matrix</span></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">cm <span class="token operator">=</span> confusion_matrix<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line">sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>cm<span class="token punctuation">,</span> annot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&#39;Blues&#39;</span><span class="token punctuation">,</span> xticklabels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;Ham&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Spam&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> yticklabels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;Ham&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Spam&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">&#39;Predicted Label&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">&#39;True Label&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Confusion Matrix&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step-5-model-optimization-and-feature-analysis" tabindex="-1"><a class="header-anchor" href="#step-5-model-optimization-and-feature-analysis"><span>Step 5: Model Optimization and Feature Analysis</span></a></h3><p>Next, we optimize model parameters and analyze important features.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCV</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Parameter optimization</span></span>
<span class="line">param_grid <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;alpha&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">grid_search <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>MultinomialNB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">&#39;accuracy&#39;</span><span class="token punctuation">)</span></span>
<span class="line">grid_search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train_tfidf<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Output best parameters</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Best Parameters:&quot;</span><span class="token punctuation">,</span> grid_search<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Best Cross-Validation Score:&quot;</span><span class="token punctuation">,</span> grid_search<span class="token punctuation">.</span>best_score_<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Use best model</span></span>
<span class="line">best_nb <span class="token operator">=</span> grid_search<span class="token punctuation">.</span>best_estimator_</span>
<span class="line">y_pred_best <span class="token operator">=</span> best_nb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test_tfidf<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Evaluate optimized model</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nOptimized Model Performance:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Accuracy:&quot;</span><span class="token punctuation">,</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_best<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nClassification Report:&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>classification_report<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred_best<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Analyze important features</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">get_most_informative_features</span><span class="token punctuation">(</span>vectorizer<span class="token punctuation">,</span> classifier<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    feature_names <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>get_feature_names_out<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    coefs_with_fnames <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>classifier<span class="token punctuation">.</span>coef_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> feature_names<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    top_negative <span class="token operator">=</span> coefs_with_fnames<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span></span>
<span class="line">    top_positive <span class="token operator">=</span> coefs_with_fnames<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">return</span> top_positive<span class="token punctuation">,</span> top_negative</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Get important features for spam and ham</span></span>
<span class="line">top_spam_features<span class="token punctuation">,</span> top_ham_features <span class="token operator">=</span> get_most_informative_features<span class="token punctuation">(</span>vectorizer<span class="token punctuation">,</span> best_nb<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Visualize important features</span></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">y_pos <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>top_spam_features<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>barh<span class="token punctuation">(</span>y_pos<span class="token punctuation">,</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> top_spam_features<span class="token punctuation">]</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">&#39;center&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>y_pos<span class="token punctuation">,</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> top_spam_features<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Important Features for Spam&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">y_pos <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>top_ham_features<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>barh<span class="token punctuation">(</span>y_pos<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token builtin">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> top_ham_features<span class="token punctuation">]</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">&#39;center&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>y_pos<span class="token punctuation">,</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> top_ham_features<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Important Features for Ham&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step-6-build-a-simple-spam-filtering-system" tabindex="-1"><a class="header-anchor" href="#step-6-build-a-simple-spam-filtering-system"><span>Step 6: Build a Simple Spam Filtering System</span></a></h3><p>Finally, we build a simple spam filtering system that can classify new emails.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">predict_email</span><span class="token punctuation">(</span>email_content<span class="token punctuation">,</span> email_subject<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> threshold<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># Preprocess</span></span>
<span class="line">    cleaned_content <span class="token operator">=</span> preprocess_text<span class="token punctuation">(</span>email_content<span class="token punctuation">)</span></span>
<span class="line">    cleaned_subject <span class="token operator">=</span> preprocess_text<span class="token punctuation">(</span>email_subject<span class="token punctuation">)</span> <span class="token keyword">if</span> email_subject <span class="token keyword">else</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    combined_text <span class="token operator">=</span> cleaned_subject <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> cleaned_content</span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Vectorize</span></span>
<span class="line">    email_tfidf <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token punctuation">[</span>combined_text<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Predict probability</span></span>
<span class="line">    spam_prob <span class="token operator">=</span> best_nb<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>email_tfidf<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Decide based on threshold</span></span>
<span class="line">    is_spam <span class="token operator">=</span> spam_prob <span class="token operator">&gt;</span> threshold</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;is_spam&#39;</span><span class="token punctuation">:</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>is_spam<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;spam_probability&#39;</span><span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">(</span>spam_prob<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;prediction&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Spam&#39;</span> <span class="token keyword">if</span> is_spam <span class="token keyword">else</span> <span class="token string">&#39;Ham&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Test the system</span></span>
<span class="line">test_emails <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;subject&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Meeting tomorrow&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;content&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Hi team, just a reminder that we have a meeting scheduled for tomorrow at 10am. Please prepare your weekly reports.&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;subject&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;URGENT: Your account has been compromised&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;content&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Dear valued customer, your account has been compromised. Click here to verify your information and claim your $1000 reward immediately!&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;subject&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Free Viagra and Cialis&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;content&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Best prices on the market! Buy now and get 90% discount on all products. Limited time offer!&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> i<span class="token punctuation">,</span> email <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>test_emails<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    result <span class="token operator">=</span> predict_email<span class="token punctuation">(</span>email<span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> email<span class="token punctuation">[</span><span class="token string">&#39;subject&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Email </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">:&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Subject: </span><span class="token interpolation"><span class="token punctuation">{</span>email<span class="token punctuation">[</span><span class="token string">&#39;subject&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Content: </span><span class="token interpolation"><span class="token punctuation">{</span>email<span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">100]</span><span class="token punctuation">}</span></span><span class="token string">...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Prediction: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">[</span><span class="token string">&#39;prediction&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Spam Probability: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">[</span><span class="token string">&#39;spam_probability&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span> <span class="token operator">*</span> <span class="token number">80</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="results-analysis" tabindex="-1"><a class="header-anchor" href="#results-analysis"><span>Results Analysis</span></a></h2><p>By implementing this project, we successfully built a spam filtering system that can effectively distinguish between normal and spam emails. The model achieved about 95% accuracy on the test set, indicating the effectiveness of our approach.</p><p>Analysis of important features showed that spam emails often contain words like &quot;free,&quot; &quot;offer,&quot; &quot;money,&quot; and &quot;discount,&quot; while normal emails contain more personal and work-related terms. This matches our intuition and verifies that the model has learned meaningful patterns.</p><p>Parameter optimization showed that adjusting the smoothing parameter of Naive Bayes can further improve model performance. The final system provides spam probability for new emails, allowing users to adjust the filtering threshold based on their needs.</p><h2 id="advanced-challenges" tabindex="-1"><a class="header-anchor" href="#advanced-challenges"><span>Advanced Challenges</span></a></h2><p>If you&#39;ve completed the basic tasks, try the following advanced challenges:</p><ol><li><strong>Advanced Feature Engineering</strong>: Experiment with n-gram features, part-of-speech tagging, or entity recognition.</li><li><strong>Model Comparison</strong>: Compare Naive Bayes with SVM, random forests, and other classification algorithms.</li><li><strong>Online Learning</strong>: Implement a system that continuously learns from user feedback.</li><li><strong>Multilingual Support</strong>: Extend the system to support spam detection in multiple languages.</li><li><strong>Deployment</strong>: Deploy the model as a web application or email client plugin.</li></ol><h2 id="summary-and-reflection" tabindex="-1"><a class="header-anchor" href="#summary-and-reflection"><span>Summary and Reflection</span></a></h2><p>Through this project, we learned how to process text data and apply the Naive Bayes algorithm to build a spam filter. Text classification is a fundamental task in natural language processing, and mastering these skills can be applied to sentiment analysis, topic classification, and other scenarios.</p><p>In practice, spam filtering systems need to be regularly updated to cope with new spam patterns. Spam senders also constantly adjust their strategies to evade filters, creating an &quot;arms race.&quot; Therefore, real-world systems typically combine multiple techniques and regularly update the model.</p><h3 id="reflection-questions" tabindex="-1"><a class="header-anchor" href="#reflection-questions"><span>Reflection Questions</span></a></h3><ol><li>How do you balance precision and recall in spam filtering? What is the cost of misclassification?</li><li>Naive Bayes assumes that features are independent, but words in text are clearly not independent. Why does Naive Bayes still perform well in text classification?</li><li>How do you handle evasion techniques used by spam senders, such as deliberate misspellings or using images instead of text?</li></ol><div class="practice-link"><a href="/en/projects/classification/credit-risk.html" class="button">Next Project: Credit Risk Assessment</a></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add(".vuepress/.temp/pages/en/projects/classification/spam-filter.html.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const spamFilter_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender], ["__file", "spam-filter.html.vue"]]);
const data = JSON.parse('{"path":"/en/projects/classification/spam-filter.html","title":"Spam Filter","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Project Background","slug":"project-background","link":"#project-background","children":[]},{"level":2,"title":"Dataset Introduction","slug":"dataset-introduction","link":"#dataset-introduction","children":[]},{"level":2,"title":"Project Goals","slug":"project-goals","link":"#project-goals","children":[]},{"level":2,"title":"Implementation Steps","slug":"implementation-steps","link":"#implementation-steps","children":[{"level":3,"title":"Step 1: Data Loading and Exploration","slug":"step-1-data-loading-and-exploration","link":"#step-1-data-loading-and-exploration","children":[]},{"level":3,"title":"Step 2: Text Preprocessing","slug":"step-2-text-preprocessing","link":"#step-2-text-preprocessing","children":[]},{"level":3,"title":"Step 3: Feature Extraction","slug":"step-3-feature-extraction","link":"#step-3-feature-extraction","children":[]},{"level":3,"title":"Step 4: Build Naive Bayes Classifier","slug":"step-4-build-naive-bayes-classifier","link":"#step-4-build-naive-bayes-classifier","children":[]},{"level":3,"title":"Step 5: Model Optimization and Feature Analysis","slug":"step-5-model-optimization-and-feature-analysis","link":"#step-5-model-optimization-and-feature-analysis","children":[]},{"level":3,"title":"Step 6: Build a Simple Spam Filtering System","slug":"step-6-build-a-simple-spam-filtering-system","link":"#step-6-build-a-simple-spam-filtering-system","children":[]}]},{"level":2,"title":"Results Analysis","slug":"results-analysis","link":"#results-analysis","children":[]},{"level":2,"title":"Advanced Challenges","slug":"advanced-challenges","link":"#advanced-challenges","children":[]},{"level":2,"title":"Summary and Reflection","slug":"summary-and-reflection","link":"#summary-and-reflection","children":[{"level":3,"title":"Reflection Questions","slug":"reflection-questions","link":"#reflection-questions","children":[]}]}],"git":{"updatedTime":1742831857000,"contributors":[{"name":"like45599","username":"like45599","email":"131803211+like45599@users.noreply.github.com","commits":2,"url":"https://github.com/like45599"}],"changelog":[{"hash":"2bc457cfaf02a69e1673760e9106a75f7cced3da","time":1742831857000,"email":"131803211+like45599@users.noreply.github.com","author":"Yun Feng","message":"优化跳转地址+更新网站icon"},{"hash":"61a31e55d1325755fa12a32e909ee09c3ac0a20f","time":1742460681000,"email":"131803211+like45599@users.noreply.github.com","author":"Yun Feng","message":"数据挖掘指南v1.0"}]},"filePathRelative":"en/projects/classification/spam-filter.md"}');
export {
  spamFilter_html as comp,
  data
};
