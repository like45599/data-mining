import { resolveComponent, useSSRContext } from "vue";
import { ssrRenderAttrs, ssrRenderStyle, ssrRenderComponent } from "vue/server-renderer";
import { _ as _export_sfc } from "../app.C2n1Acj7.mjs";
import "@vuepress/shared";
import "vue-router";
import "@vueuse/core";
import "@vue/devtools-api";
const _sfc_main = {};
function _sfc_ssrRender(_ctx, _push, _parent, _attrs) {
  const _component_BackToPath = resolveComponent("BackToPath");
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="分类算法比较" tabindex="-1"><a class="header-anchor" href="#分类算法比较"><span>分类算法比较</span></a></h1><div class="knowledge-card"><div class="knowledge-card__title"><span class="icon">📚</span>本节要点 </div><div class="knowledge-card__content"><ul><li>理解不同分类算法的优缺点和适用场景</li><li>掌握如何选择合适的分类算法</li><li>学习如何评估和比较不同分类模型的性能</li><li>了解集成方法如何提高分类性能</li></ul></div></div><h2 id="主要分类算法对比" tabindex="-1"><a class="header-anchor" href="#主要分类算法对比"><span>主要分类算法对比</span></a></h2><p>不同的分类算法有各自的优缺点和适用场景。以下是常见分类算法的比较：</p><div class="table-container"><table><thead><tr><th>算法</th><th>优点</th><th>缺点</th><th>适用场景</th><th>复杂度</th></tr></thead><tbody><tr><td>支持向量机(SVM)</td><td> - 在高维空间有效<br> - 对于边界清晰的数据效果好<br> - 内存高效 </td><td> - 对大数据集计算成本高<br> - 对噪声敏感<br> - 不直接提供概率估计 </td><td> - 文本分类<br> - 图像识别<br> - 中小型复杂数据集 </td><td>中高</td></tr><tr><td>朴素贝叶斯</td><td> - 训练和预测速度快<br> - 对小数据集效果好<br> - 处理多类问题 </td><td> - 特征独立性假设<br> - 对数值特征建模不精确<br> - 零频率问题 </td><td> - 文本分类/垃圾邮件过滤<br> - 情感分析<br> - 推荐系统 </td><td>低</td></tr><tr><td>决策树</td><td> - 易于理解和解释<br> - 无需特征缩放<br> - 可处理数值和类别特征 </td><td> - 容易过拟合<br> - 不稳定<br> - 偏向主导特征 </td><td> - 需要可解释性的场景<br> - 特征交互重要<br> - 医疗诊断 </td><td>中</td></tr><tr><td>随机森林</td><td> - 减少过拟合<br> - 提供特征重要性<br> - 处理缺失值 </td><td> - 解释性较差<br> - 计算密集<br> - 对非常高维数据效率低 </td><td> - 需要高准确率<br> - 特征重要性分析<br> - 金融风险评估 </td><td>中高</td></tr><tr><td>逻辑回归</td><td> - 简单易实现<br> - 提供概率输出<br> - 训练速度快 </td><td> - 只能线性分类<br> - 对异常值敏感<br> - 需要特征工程 </td><td> - 二分类问题<br> - 需要概率解释<br> - 信用评分 </td><td>低</td></tr><tr><td>K近邻(KNN)</td><td> - 简单易实现<br> - 无需训练<br> - 适应复杂决策边界 </td><td> - 计算成本高<br> - 对特征缩放敏感<br> - 维度灾难 </td><td> - 推荐系统<br> - 异常检测<br> - 小型低维数据集 </td><td>中</td></tr><tr><td>神经网络</td><td> - 捕捉复杂非线性关系<br> - 自动特征学习<br> - 高度可扩展 </td><td> - 计算密集<br> - 需要大量数据<br> - 黑盒模型 </td><td> - 图像识别<br> - 语音识别<br> - 复杂模式识别 </td><td>高</td></tr></tbody></table></div><h2 id="算法选择指南" tabindex="-1"><a class="header-anchor" href="#算法选择指南"><span>算法选择指南</span></a></h2><p>选择合适的分类算法需要考虑多种因素：</p><h3 id="数据特性" tabindex="-1"><a class="header-anchor" href="#数据特性"><span>数据特性</span></a></h3><ul><li><strong>数据量</strong>：小数据集适合朴素贝叶斯、逻辑回归；大数据集适合神经网络、随机森林</li><li><strong>特征数量</strong>：高维数据适合SVM、朴素贝叶斯；低维数据几乎所有算法都适用</li><li><strong>特征类型</strong>：类别特征适合决策树；混合特征可考虑随机森林</li><li><strong>线性可分性</strong>：线性可分数据适合逻辑回归、线性SVM；非线性数据适合核SVM、决策树、神经网络</li></ul><h3 id="任务需求" tabindex="-1"><a class="header-anchor" href="#任务需求"><span>任务需求</span></a></h3><ul><li><strong>解释性</strong>：需要高解释性选择决策树、逻辑回归；性能优先选择随机森林、神经网络</li><li><strong>训练时间</strong>：时间敏感场景选择朴素贝叶斯、逻辑回归</li><li><strong>预测时间</strong>：实时预测选择决策树、KNN、逻辑回归</li><li><strong>内存限制</strong>：资源受限场景选择朴素贝叶斯、线性模型</li></ul><h2 id="模型性能比较" tabindex="-1"><a class="header-anchor" href="#模型性能比较"><span>模型性能比较</span></a></h2><p>在实际应用中，通常需要比较多个模型的性能以选择最佳方案。</p><div class="code-example"><div class="code-example__title">代码示例</div><div class="code-example__content"><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_breast_cancer</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token punctuation">,</span> cross_val_score</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVC</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> GaussianNB</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neural_network <span class="token keyword">import</span> MLPClassifier</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token punctuation">,</span> precision_score<span class="token punctuation">,</span> recall_score<span class="token punctuation">,</span> f1_score<span class="token punctuation">,</span> roc_auc_score</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipeline</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 加载数据</span></span>
<span class="line">data <span class="token operator">=</span> load_breast_cancer<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">X<span class="token punctuation">,</span> y <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>target</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 划分训练集和测试集</span></span>
<span class="line">X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建分类器字典</span></span>
<span class="line">classifiers <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;SVM&#39;</span><span class="token punctuation">:</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;scaler&#39;</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;clf&#39;</span><span class="token punctuation">,</span> SVC<span class="token punctuation">(</span>probability<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;朴素贝叶斯&#39;</span><span class="token punctuation">:</span> GaussianNB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;决策树&#39;</span><span class="token punctuation">:</span> DecisionTreeClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;随机森林&#39;</span><span class="token punctuation">:</span> RandomForestClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;逻辑回归&#39;</span><span class="token punctuation">:</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;scaler&#39;</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;clf&#39;</span><span class="token punctuation">,</span> LogisticRegression<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;K近邻&#39;</span><span class="token punctuation">:</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;scaler&#39;</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;clf&#39;</span><span class="token punctuation">,</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;神经网络&#39;</span><span class="token punctuation">:</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;scaler&#39;</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;clf&#39;</span><span class="token punctuation">,</span> MLPClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span> max_iter<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 评估指标</span></span>
<span class="line">results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> name<span class="token punctuation">,</span> clf <span class="token keyword">in</span> classifiers<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 训练模型</span></span>
<span class="line">    clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 预测</span></span>
<span class="line">    y_pred <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span></span>
<span class="line">    y_prob <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 计算评估指标</span></span>
<span class="line">    accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line">    precision <span class="token operator">=</span> precision_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line">    recall <span class="token operator">=</span> recall_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line">    f1 <span class="token operator">=</span> f1_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line">    auc <span class="token operator">=</span> roc_auc_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_prob<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 交叉验证</span></span>
<span class="line">    cv_scores <span class="token operator">=</span> cross_val_score<span class="token punctuation">(</span>clf<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 存储结果</span></span>
<span class="line">    results<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;Accuracy&#39;</span><span class="token punctuation">:</span> accuracy<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;Precision&#39;</span><span class="token punctuation">:</span> precision<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;Recall&#39;</span><span class="token punctuation">:</span> recall<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;F1&#39;</span><span class="token punctuation">:</span> f1<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;AUC&#39;</span><span class="token punctuation">:</span> auc<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;CV&#39;</span><span class="token punctuation">:</span> cv_scores<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建结果DataFrame</span></span>
<span class="line">results_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">.</span>T</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>results_df<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 可视化比较</span></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">results_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Accuracy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Precision&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Recall&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AUC&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;不同分类算法性能比较&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">&#39;得分&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">&#39;算法&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">&#39;lower right&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><h2 id="集成方法" tabindex="-1"><a class="header-anchor" href="#集成方法"><span>集成方法</span></a></h2><p>集成方法通过组合多个基础模型来提高分类性能，常见的集成方法包括：</p><h3 id="投票法" tabindex="-1"><a class="header-anchor" href="#投票法"><span>投票法</span></a></h3><p>结合多个不同模型的预测结果，可以是硬投票（多数表决）或软投票（概率平均）。</p><div class="code-example"><div class="code-example__title">代码示例</div><div class="code-example__content"><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> VotingClassifier</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建基础分类器</span></span>
<span class="line">clf1 <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line">clf2 <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line">clf3 <span class="token operator">=</span> SVC<span class="token punctuation">(</span>probability<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建投票分类器</span></span>
<span class="line">voting_clf <span class="token operator">=</span> VotingClassifier<span class="token punctuation">(</span></span>
<span class="line">    estimators<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;lr&#39;</span><span class="token punctuation">,</span> clf1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;rf&#39;</span><span class="token punctuation">,</span> clf2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;svc&#39;</span><span class="token punctuation">,</span> clf3<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    voting<span class="token operator">=</span><span class="token string">&#39;soft&#39;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 训练和评估</span></span>
<span class="line">voting_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line">y_pred <span class="token operator">=</span> voting_clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span></span>
<span class="line">accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;投票分类器准确率: </span><span class="token interpolation"><span class="token punctuation">{</span>accuracy<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><h3 id="堆叠法" tabindex="-1"><a class="header-anchor" href="#堆叠法"><span>堆叠法</span></a></h3><p>使用一个元模型来组合基础模型的预测结果。</p><div class="code-example"><div class="code-example__title">代码示例</div><div class="code-example__content"><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> StackingClassifier</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建基础分类器</span></span>
<span class="line">estimators <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token string">&#39;rf&#39;</span><span class="token punctuation">,</span> RandomForestClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token string">&#39;svc&#39;</span><span class="token punctuation">,</span> SVC<span class="token punctuation">(</span>probability<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token string">&#39;nb&#39;</span><span class="token punctuation">,</span> GaussianNB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建堆叠分类器</span></span>
<span class="line">stacking_clf <span class="token operator">=</span> StackingClassifier<span class="token punctuation">(</span></span>
<span class="line">    estimators<span class="token operator">=</span>estimators<span class="token punctuation">,</span></span>
<span class="line">    final_estimator<span class="token operator">=</span>LogisticRegression<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 训练和评估</span></span>
<span class="line">stacking_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span></span>
<span class="line">y_pred <span class="token operator">=</span> stacking_clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span></span>
<span class="line">accuracy <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;堆叠分类器准确率: </span><span class="token interpolation"><span class="token punctuation">{</span>accuracy<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><div class="knowledge-card"><div class="knowledge-card__title"><span class="icon">⚠️</span>常见误区 </div><div class="knowledge-card__content"><ul><li><strong>过度追求准确率</strong>：在不平衡数据集上，准确率可能具有误导性</li><li><strong>忽略计算成本</strong>：高性能模型可能在实际部署中不可行</li><li><strong>盲目使用复杂模型</strong>：简单模型可能更稳定且易于维护</li><li><strong>忽略特征工程</strong>：良好的特征工程往往比算法选择更重要</li><li><strong>忽略模型解释性</strong>：在许多领域，解释性与性能同样重要</li></ul></div></div><h2 id="小结与思考" tabindex="-1"><a class="header-anchor" href="#小结与思考"><span>小结与思考</span></a></h2><p>选择合适的分类算法是数据科学工作流程中的关键步骤，需要综合考虑数据特性、任务需求和资源限制。</p><h3 id="关键要点回顾" tabindex="-1"><a class="header-anchor" href="#关键要点回顾"><span>关键要点回顾</span></a></h3><ul><li>不同分类算法有各自的优缺点和适用场景</li><li>算法选择应考虑数据量、特征特性、任务需求和资源限制</li><li>交叉验证是比较模型性能的可靠方法</li><li>集成方法通常比单个模型表现更好</li><li>模型选择应平衡预测性能、解释性和计算成本</li></ul><h3 id="思考问题" tabindex="-1"><a class="header-anchor" href="#思考问题"><span>思考问题</span></a></h3><ol><li>在什么情况下应该选择简单模型而非复杂模型？</li><li>如何平衡模型的预测性能和解释性？</li><li>为什么集成方法通常能提高分类性能？</li></ol>`);
  _push(ssrRenderComponent(_component_BackToPath, null, null, _parent));
  _push(`<div class="practice-link"><a href="/projects/classification.html" class="button">前往实践项目</a></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add(".vuepress/.temp/pages/core/classification/comparison.html.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const comparison_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender], ["__file", "comparison.html.vue"]]);
const data = JSON.parse('{"path":"/core/classification/comparison.html","title":"分类算法比较","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"主要分类算法对比","slug":"主要分类算法对比","link":"#主要分类算法对比","children":[]},{"level":2,"title":"算法选择指南","slug":"算法选择指南","link":"#算法选择指南","children":[{"level":3,"title":"数据特性","slug":"数据特性","link":"#数据特性","children":[]},{"level":3,"title":"任务需求","slug":"任务需求","link":"#任务需求","children":[]}]},{"level":2,"title":"模型性能比较","slug":"模型性能比较","link":"#模型性能比较","children":[]},{"level":2,"title":"集成方法","slug":"集成方法","link":"#集成方法","children":[{"level":3,"title":"投票法","slug":"投票法","link":"#投票法","children":[]},{"level":3,"title":"堆叠法","slug":"堆叠法","link":"#堆叠法","children":[]}]},{"level":2,"title":"小结与思考","slug":"小结与思考","link":"#小结与思考","children":[{"level":3,"title":"关键要点回顾","slug":"关键要点回顾","link":"#关键要点回顾","children":[]},{"level":3,"title":"思考问题","slug":"思考问题","link":"#思考问题","children":[]}]}],"git":{"updatedTime":1742831857000,"contributors":[{"name":"like45599","username":"like45599","email":"131803211+like45599@users.noreply.github.com","commits":2,"url":"https://github.com/like45599"}],"changelog":[{"hash":"2bc457cfaf02a69e1673760e9106a75f7cced3da","time":1742831857000,"email":"131803211+like45599@users.noreply.github.com","author":"Yun Feng","message":"优化跳转地址+更新网站icon"},{"hash":"61a31e55d1325755fa12a32e909ee09c3ac0a20f","time":1742460681000,"email":"131803211+like45599@users.noreply.github.com","author":"Yun Feng","message":"数据挖掘指南v1.0"}]},"filePathRelative":"core/classification/comparison.md"}');
export {
  comparison_html as comp,
  data
};
